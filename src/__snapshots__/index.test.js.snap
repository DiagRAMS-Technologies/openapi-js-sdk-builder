// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateSDKFromOpenAPI should work 1`] = `
"
// WARNING: This file is automatically generated
// do not change it in place it would be overridden
// by the next build
'use strict';

const querystring = require('querystring');
const axios = require('axios');

/**
 * A basic Whook server
 * @module API
 * @version 3.1.3
 */
const API = {
  getOpenAPI,
  getPing,
  getDelay,
  getDiagnostic,
  getTime,
  putEcho,
};


/**
 * Get API documentation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOpenAPI(_, options) {



  const method = 'get';
  let urlParts = [
    'openAPI',
  ];
  let headers = Object.assign(((options || {}).headers || {}), {
    'X-API-Version': '3.1.3',
  });
  let qs = cleanQuery({
  });
  let data = {}.undef;

  return axios(Object.assign({
    baseURL: '[object Object]',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: status => 200 <= status && 300 > status,
    method: method,
    url: urlParts.join('/'),
    headers: cleanHeaders(headers),
    params: qs,
    data,
  }, options || {}));
}

/**
 * Checks API's availability.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getPing(_, options) {



  const method = 'get';
  let urlParts = [
    'ping',
  ];
  let headers = Object.assign(((options || {}).headers || {}), {
    'X-API-Version': '3.1.3',
  });
  let qs = cleanQuery({
  });
  let data = {}.undef;

  return axios(Object.assign({
    baseURL: '[object Object]',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: status => 200 <= status && 300 > status,
    method: method,
    url: urlParts.join('/'),
    headers: cleanHeaders(headers),
    params: qs,
    data,
  }, options || {}));
}

/**
 * Answer after a given delay.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.duration
 * Duration in milliseconds
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getDelay({
  duration,} = {}, options) {


  if( duration == null) {
    throw new Error('Missing required parameter : duration. Value : ' +  duration);
  }


  const method = 'get';
  let urlParts = [
    'delay',
  ];
  let headers = Object.assign(((options || {}).headers || {}), {
    'X-API-Version': '3.1.3',
  });
  let qs = cleanQuery({
    duration: duration,
  });
  let data = {}.undef;

  return axios(Object.assign({
    baseURL: '[object Object]',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: status => 200 <= status && 300 > status,
    method: method,
    url: urlParts.join('/'),
    headers: cleanHeaders(headers),
    params: qs,
    data,
  }, options || {}));
}

/**
 * Returns current API's transactions.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getDiagnostic(_, options) {



  const method = 'get';
  let urlParts = [
    'diag',
  ];
  let headers = Object.assign(((options || {}).headers || {}), {
    'X-API-Version': '3.1.3',
  });
  let qs = cleanQuery({
  });
  let data = {}.undef;

  return axios(Object.assign({
    baseURL: '[object Object]',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: status => 200 <= status && 300 > status,
    method: method,
    url: urlParts.join('/'),
    headers: cleanHeaders(headers),
    params: qs,
    data,
  }, options || {}));
}

/**
 * Get API internal clock date.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getTime(_, options) {



  const method = 'get';
  let urlParts = [
    'time',
  ];
  let headers = Object.assign(((options || {}).headers || {}), {
    'X-API-Version': '3.1.3',
  });
  let qs = cleanQuery({
  });
  let data = {}.undef;

  return axios(Object.assign({
    baseURL: '[object Object]',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: status => 200 <= status && 300 > status,
    method: method,
    url: urlParts.join('/'),
    headers: cleanHeaders(headers),
    params: qs,
    data,
  }, options || {}));
}

/**
 * Echoes what it takes.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putEcho({
      body,} = {}, options) {



  const method = 'put';
  let urlParts = [
    'echo',
  ];
  let headers = Object.assign(((options || {}).headers || {}), {
    'X-API-Version': '3.1.3',
  });
  let qs = cleanQuery({
  });
  let data = body;

  return axios(Object.assign({
    baseURL: '[object Object]',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: status => 200 <= status && 300 > status,
    method: method,
    url: urlParts.join('/'),
    headers: cleanHeaders(headers),
    params: qs,
    data,
  }, options || {}));
}

function cleanQuery(query) {
    return Object.keys(query)
    .filter(key => \\"undefined\\" !== typeof query[key])
    .filter(key => !(query[key] instanceof Array) || 0 !== query[key].length)
    .reduce((newQuery, key) => {
        newQuery[key] = query[key];
        return newQuery;
    }, {});
}

function cleanHeaders(headers) {
    return Object.keys(headers)
    .filter(key => \\"undefined\\" !== typeof headers[key])
    .reduce((newHeaders, key) => {
        newHeaders[key] = headers[key];
        return newHeaders;
    }, {});
}

// eslint-disable-next-line no-unused-vars
function sortMultipleQuery(a, b) {
    return a > b ? 1 : -1;
}

module.exports = API;
"
`;
